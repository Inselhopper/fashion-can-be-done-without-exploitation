var chart = $("#chart"),
    aspect = chart.width() / chart.height(),
    container = chart.parent();
//damit Visualisierung sich an die Fenstergröße anpasst
$(window).on("resize", function() {
    var targetWidth = container.width();
    chart.attr("width", targetWidth);
    chart.attr("height", Math.round(targetWidth / aspect));

}).trigger("resize");

var svg = d3.select("svg"),
    margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scaleBand()
    .rangeRound([0, width])
    .paddingInner(0.05)
    .align(0.1);

var y = d3.scaleLinear()
    .rangeRound([height, 0]);

var z = d3.scaleOrdinal()
    .range(["#FBC71C", "#F98D28", "#F95E1B", "#DE3907", "#582BA0", "#4192B0", "#0D5363" , "#A36A55"]);

var realData = "data.csv"; // the real costs of a 30 Euro T-Shirt
var startData = "data2.csv"; // all the same aound for start the quest -  every cost part has the same amount of 1/8 of 30 Euro
var testData = [
    { 1: "1.75", 2: "1.75", 3: "1.75", 4: "4.75", 5: "4.75", 6: "4.75",7: "3.75",8: "3.75" } //var testData = [1.75,1.75,1.75,4.75,4.75,4.75,3.75,3.75 ];
];
function update(data){

    d3.csv(data, function(d, i, columns) {
        //add all the costs and put it into the data-Object
        for (i = 1, t = 0; i < columns.length; ++i) {
            //right side: making the string to a number
            t += +d[columns[i]] ;
        }
            d.total = t;
            return d;
    }, function(error, data) {
        if (error) throw error;

        var keys = data.columns.slice(1);

        data.sort(function(a, b) { return b.total - a.total; });



        y.domain([0, d3.max(data, function(d) { return d.total; })]).nice();
        z.domain(keys);

        var areaWithHandlerGroup = g.append("g")
            .selectAll("g")
            .data(d3.stack().keys(keys)(data))
            .enter().append("g")
            .attr("fill", function(d) { return z(d.key); });

        var rectangles = areaWithHandlerGroup.selectAll("rect")
            .data(function(d) { return d; })
            .enter().append("rect")
            .attr("x", "0")
            .attr("y", function(d) { return y(d[1]); })
            .attr("height", function(d) { return y(d[0]) - y(d[1]); })
            .attr("width", 100)
            .attr("id", "resizeable");

        var handlers = areaWithHandlerGroup.selectAll("g")
            .data(function(d) { return d; })
            .enter().append("g")
            .call(d3.drag()
                .on("drag", dragResize))
            .attr("class","useedT resizer handler" )
            .attr("transform", function(d) { return "translate(0," + y(d[1]) + ")"; })
            .attr("id","handler" )
            .append("polygon")
            .attr("points","37.87 0 3.93 0 0 6.81 3.93 13.62 37.87 13.62 41.81 6.81 37.87 0" )
            .attr("class","resizer2" )
            .attr("id","handler" );


        //Legende
        var legend = g.append("g")
            .attr("font-family", "sans-serif")
            .attr("font-size", 10)
            .attr("text-anchor", "end")
            .selectAll("g")
            .data(keys.slice().reverse())
            .enter().append("g")
            .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

        legend.append("rect")
            .attr("x", width - 19)
            .attr("width", 19)
            .attr("height", 19)
            .attr("fill", z);

        legend.append("text")
            .attr("x", width - 24)
            .attr("y", 9.5)
            .attr("dy", "0.32em")
            .text(function(d) { return d; });

    });
}
// The initial display.
update(startData);
var data = [200];

var buildResizeable = d3.select('#resizeable');


var resizer = d3.selectAll('.resizer');//das sucht ein Polygon, ist noch nicht richtig so

var use = d3.select('.useedT'); //gruppe um Polygon, könnnte auch das Polygon sein?


  function dragResize(d) {
      d3.select(this)
          .attr("transform", function(d)    {
                                                d.x = d3.event.y;
                                                return "translate(0," + d.x + ")";
                                            })
    }












