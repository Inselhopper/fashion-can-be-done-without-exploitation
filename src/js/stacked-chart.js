var chart = $("#chart"),
    aspect = chart.width() / chart.height(),
    container = chart.parent();
$(window).on("resize", function() {
    var targetWidth = container.width();
    console.log(targetWidth);
    chart.attr("width", targetWidth);
    chart.attr("height", Math.round(targetWidth / aspect));
    console.log("werde ausgel√∂st");
}).trigger("resize");

var svg = d3.select("svg"),
    margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scaleBand()
    .rangeRound([0, width])
    .paddingInner(0.05)
    .align(0.1);

var y = d3.scaleLinear()
    .rangeRound([height, 0]);

var z = d3.scaleOrdinal()
    .range(["#FBC71C", "#F98D28", "#F95E1B", "#DE3907", "#582BA0", "#4192B0", "#0D5363" , "#A36A55"]);


//var data = [3.75,3.75,3.75,3.75,3.75,3.75,3.75,3.75 ];


d3.csv("data.csv", function(d, i, columns) {
    console.log(d);
    for (i = 1, t = 0; i < columns.length; ++i) {
        console.log(typeof(+d[columns[i]]));
        //right side: making the string to a number
        t += +d[columns[i]] ;
        console.log("test" + t);
    }
        d.total = t;
        return d;
}, function(error, data) {
    if (error) throw error;

    var keys = data.columns.slice(1);

    data.sort(function(a, b) { return b.total - a.total; });
    //x.domain(data.map(function(d) { return d.State; }));
    y.domain([0, d3.max(data, function(d) { return d.total; })]).nice();
    z.domain(keys);

    var areaWithHandlerGroup = g.append("g")
        .selectAll("g")
        .data(d3.stack().keys(keys)(data))
        .enter().append("g")
        .attr("fill", function(d) { return z(d.key); });

    areaWithHandlerGroup.selectAll("rect")
        .data(function(d) { return d; })
        .enter().append("rect")
        .attr("x", "0")
        .attr("y", function(d) { return y(d[1]); })
        .attr("height", function(d) { return y(d[0]) - y(d[1]); })
        .attr("width", 100)
        .attr("id", "resizeable");

    areaWithHandlerGroup.selectAll("g")
        .data(function(d) { return d; })
        .enter().append("use")
        .attr("x", function(d) { return x(d.data.State); })
        .attr("y", function(d) { return y(d[1]); })
        .attr("xlink:href", "#handler");



    g.append("g")
        .attr("class", "axis")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x));
    g.append("g")
        .attr("class", "axis")
        .call(d3.axisLeft(y).ticks(null, "s"))
        .append("text")
        .attr("x", 2)
        .attr("y", y(y.ticks().pop()) + 0.5)
        .attr("dy", "0.32em")
        .attr("fill", "#000")
        .attr("font-weight", "bold")
        .attr("text-anchor", "start")
        .text("Population");

    var legend = g.append("g")
        .attr("font-family", "sans-serif")
        .attr("font-size", 10)
        .attr("text-anchor", "end")
        .selectAll("g")
        .data(keys.slice().reverse())
        .enter().append("g")
        .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

    legend.append("rect")
        .attr("x", width - 19)
        .attr("width", 19)
        .attr("height", 19)
        .attr("fill", z);

    legend.append("text")
        .attr("x", width - 24)
        .attr("y", 9.5)
        .attr("dy", "0.32em")
        .text(function(d) { return d; });
});

var data = [200];
function update() {
    d3.select('#resizeable')
        .data(data)
        .attr("height", function(d) {
            return d;
        });
}
var buildResizeable = d3.select('#resizeable');


var resizer = d3.select('.resizer');
var label = d3.select('#resizeable')
    .append('div')
    .attr('class', 'label');

var dragResize = d3.drag()
    .on('drag', function() {
        y = d3.mouse(this.parentNode)[1];
        console.log(y);
        buildResizeable.attr("height", y + 'px');
        resizer.attr("cy",y)
    });

resizer.call(dragResize);










