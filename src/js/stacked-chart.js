var chart = $("#chart"),
    aspect = chart.width() / chart.height(),
    container = chart.parent();
//damit Visualisierung sich an die Fenstergröße anpasst
$(window).on("resize", function() {
    var targetWidth = container.width();
    chart.attr("width", targetWidth);
    chart.attr("height", Math.round(targetWidth / aspect));

}).trigger("resize");

var svg = d3.select("#chart"),
    margin = {top: 0, right: 20, bottom: 30, left: 40},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("id","stack").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scaleBand()
    .rangeRound([0, width])
    .paddingInner(0.05)
    .align(0.1);

var y = d3.scaleLinear()
    .rangeRound([height, 0]);

var z = d3.scaleOrdinal()
    .range(["#A36A55","#0D5363","#4192B0","#582BA0","#DE3907","#F95E1B","#F98D28","#FBC71C"]);
var realData = "data.csv"; // the real costs of a 30 Euro T-Shirt
var startData = "data2.csv"; // all the same aound for start the quest -  every cost part has the same amount of 1/8 of 30 Euro

function update(data){
    d3.csv(data, function(d, i, columns) {
        //add all the costs and put it into the data-Object
        for (i = 1, t = 0; i < columns.length; ++i) {
            //right side: making the string to a number
            t += +d[columns[i]] ;
        }
            d.total = t;
            return d;
    }, function(error, data) {
        if (error) throw error;

        var keys = data.columns.slice(1);

        y.domain([0, d3.max(data, function(d) { return d.total; })]);
        z.domain(keys);

        var areaWithHandlerGroup = g.selectAll("g")
            .remove()
            .exit()
            .data(d3.stack().keys(keys)(data))
            .enter().append("g")
            .attr("fill", function(d) {return z(d.key); });

        var rectangles = areaWithHandlerGroup.selectAll("rect")
            .data(function(d) { return d; })
            .enter().append("rect")
            .attr("x", "0")
            .attr("y", function(d) { return y(d[1]); })
            .attr("height", function(d) {return y(d[0]) - y(d[1]); })
            .attr("width", 205);

        var handlers = areaWithHandlerGroup.selectAll("g")
            .data(function(d) { return d; })
            .enter().append("g")
            .call(d3.drag()
                .on("drag", dragResize))
            .attr("class","handler" )
            .attr("transform", function(d) {
                var handler_y = y(d[0]);
                handler_y = handler_y -6;
                return "translate(0," + handler_y + ")"; })
            .append("polygon")
            .attr("points","37.87 0 3.93 0 0 6.81 3.93 13.62 37.87 13.62 41.81 6.81 37.87 0" );

        // to cover the stacked chart on top to form a t-shirt
        var cover = svg.append("g")
                .attr("id","cover" )
                .attr("transform","translate(-2,-1)")
                .append("path")
                .attr("d","M90.3,2c0,0,8.8,19.9,52,21c43.2-1.1,52-21,52-21c24.6,8.1,31.2,9.7,53.2,13.2V0.5h-209v14.6C60.2,11.7,65.9,10,90.3,2z")


        //Legende
        var legend = g.append("g")
            .attr("font-family", "sans-serif")
            .attr("font-size", 10)
            .attr("text-anchor", "end")
            .selectAll("g")
            .data(keys.slice().reverse())
            .enter().append("g")
            .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

        legend.append("g")
            .attr("id","legend")
            .attr("transform", function(d, i) { return "translate(" + width - 24+",0)"; })
            .append("polygon")
            .attr("fill", z)
            .attr("points","32.44 28.09 32.44 9.36 16.22 0 0 9.36 0 28.09 16.22 37.45 32.44 28.09");

        legend.append("text")
            .attr("class", "labelText")
            .attr("x", width - 24)
            .attr("y", 9.5)
            .attr("dy", "0.32em")
            .text(function(d) { return d; });

    });
}
// The initial display.
update(startData);

// to handle the drag event
var dragResize = function(d)  {
  d3.select(this)
      .attr("transform", function(d)    {
                                            d.y = d3.event.y;
                                            return "translate(0," + d.y + ")";
                                        });
    // Berechnung der Höhe der Rechtecke beim Ziehen der Handler

// Data wird in Höhe des jeweiligen Rechecks umgerechnet
    console.log(d.y);
  d3.select(this.parentNode).select("rect")
  // y-Wert des jeweiligen Handler wird in Data umgerechnet
      .attr("height","20");
}












